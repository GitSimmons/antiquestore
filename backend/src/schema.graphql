# import * from 'generated/prisma.graphql'
type SuccessMessage {
  message: String!
}

enum Permission {
  ADMIN
  USER
  ITEMCREATE
  ITEMUPDATE
  ITEMDELETE
  PERMISSIONUPDATE
}

type User {
  id: String
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission]
  cart: [CartItem!]!
}

type Item {
  id: String
  title: String
  description: String
  price: Int
  cost: Int
  consigner: String
  consignmentRate: Int
  consignmentStart: DateTime
  consignmentEnd: DateTime
  sold: Boolean
  soldTo: String
  soldFor: Int
  images: [String]
  largeImages: [String]
  image: String
  createdBy: User!
}

type Collection {
  id: String
  items: [Item]
  name: String 
}
type Mutation {
  # Item Mutations
  createItem(
    title: String!
    description: String!
    price: Int
    cost: Int
    consigner: String
    consignmentRate: Int
    consignmentStart: DateTime
    consignmentEnd: DateTime
    sold: Boolean
    soldTo: String
    soldFor: Int
    images: [String]
    largeImages: [String]
    image: String
  ): Item!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  deleteItem(id: ID!): Item!
  # Collection Mutations
  createCollection(
    name: String,
    items: [String!]!
  ): Collection!
  updateCollection(data: CollectionUpdateInput!, where: CollectionWhereUniqueInput!): Item
  deleteCollection(id: ID!): Collection!
  # User Mutations
  createUser(name: String!, email: String!, password: String!): User!
  signIn(email: String!, password: String!): User!
  signOut: SuccessMessage!
  requestReset(email: String!): SuccessMessage!
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  modifyPermissions(id: ID!, permissions: [Permission]!): User
  # Cart Mutations
  addToCart(id: ID!): CartItem
  removeFromCart(id: ID!): CartItem
  createOrder(token: String!): Order!
}

type Query {
  items(
    where: ItemWhereInput
    orderBy: ItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Item]!
  collections: [Collection]!
  item(where: ItemWhereUniqueInput!): Item
  itemsConnection(where: ItemWhereInput): ItemConnection!
  users: [User]!
  user(where: UserWhereUniqueInput!): User
  currentUser: User
  order(id: ID!): Order!
}
